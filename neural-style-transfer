import torch
import torch.nn as nn
import torch.optim as optim
from torchvision import transforms, models
from PIL import Image
import matplotlib.pyplot as plt
import copy

# Check GPU
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

# Image loader
def load_image(img_path, max_size=400, shape=None):
    image = Image.open(img_path).convert('RGB')

    if max(image.size) > max_size:
        size = max_size
    else:
        size = max(image.size)

    if shape:
        size = shape

    transform = transforms.Compose([
        transforms.Resize((size, size)),
        transforms.ToTensor(),
        transforms.Normalize(mean=[0.485, 0.456, 0.406],
                             std=[0.229, 0.224, 0.225]),
    ])

    image = transform(image)[:3, :, :].unsqueeze(0)
    return image.to(device)

# Load content and style images
content = load_image("content.jpg")
style = load_image("style.jpg", shape=content.shape[-2:])

# Display images
def imshow(tensor, title=None):
    image = tensor.clone().detach().squeeze(0)
    image = transforms.ToPILImage()(image.cpu().clamp_(0, 1))
    plt.imshow(image)
    if title:
        plt.title(title)
    plt.axis('off')
    plt.show()

# Load pre-trained VGG19
vgg = models.vgg19(pretrained=True).features.to(device).eval()

# Freeze weights
for param in vgg.parameters():
    param.requires_grad = False

# Layers to extract features
content_layers = ['conv4_2']
style_layers = ['conv1_1', 'conv2_1', 'conv3_1', 'conv4_1', 'conv5_1']

# Extract selected layers
def get_features(image, model, layers):
    features = {}
    x = image
    i = 0
    for layer in model.children():
        x = layer(x)
        if isinstance(layer, nn.Conv2d):
            i += 1
            name = f'conv{i}_{1}'
            if name in layers:
                features[name] = x
    return features

# Gram Matrix for style
def gram_matrix(tensor):
    b, c, h, w = tensor.size()
    tensor = tensor.view(c, h * w)
    return torch.mm(tensor, tensor.t())

# Get features
content_features = get_features(content, vgg, content_layers)
style_features = get_features(style, vgg, style_layers)

# Compute gram matrices
style_grams = {layer: gram_matrix(style_features[layer]) for layer in style_features}

# Target image (copy of content)
target = content.clone().requires_grad_(True).to(device)

# Weights
style_weight = 1e6
content_weight = 1e0

# Optimizer
optimizer = optim.Adam([target], lr=0.003)

# Training loop
steps = 300
for step in range(steps):
    target_features = get_features(target, vgg, style_layers + content_layers)

    content_loss = torch.mean((target_features['conv4_2'] - content_features['conv4_2']) ** 2)

    style_loss = 0
    for layer in style_layers:
        target_gram = gram_matrix(target_features[layer])
        style_gram = style_grams[layer]
        layer_loss = torch.mean((target_gram - style_gram) ** 2)
        style_loss += layer_loss / (target_features[layer].nelement())

    total_loss = content_weight * content_loss + style_weight * style_loss

    optimizer.zero_grad()
    total_loss.backward()
    optimizer.step()

    if step % 50 == 0:
        print(f"Step {step}, Total Loss: {total_loss.item():.4f}")
        imshow(target, title=f"Step {step}")

# Final image
imshow(target, title="Final Stylized Image")
